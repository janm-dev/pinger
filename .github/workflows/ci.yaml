name: CI

on:
  push:
    branches: ["main"]
  pull_request:

env:
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dir: ["backend", "cli", "lib"]
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo check --manifest-path ${{ matrix.dir }}/Cargo.toml

  android:
    name: Check Android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: "aarch64-linux-android,arm-linux-androideabi,armv7-linux-androideabi,i686-linux-android,thumbv7neon-linux-androideabi,x86_64-linux-android"
      - uses: Swatinem/rust-cache@v2
      - uses: actions/setup-java@v5
        with:
          distribution: "temurin"
          java-version: "21"
      - run: |
          BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
          echo "BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION" >> $GITHUB_ENV
      - run: |
          chmod +x ./android/gradlew
          cd android && ./gradlew assembleDebug

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dir: ["backend", "cli", "lib"]
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo test --manifest-path ${{ matrix.dir }}/Cargo.toml

  fmt:
    name: Format
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dir: ["backend", "cli", "lib"]
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - run: cargo +nightly fmt --manifest-path ${{ matrix.dir }}/Cargo.toml --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dir: ["backend", "cli", "lib"]
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo +nightly clippy --all --manifest-path ${{ matrix.dir }}/Cargo.toml --all-features -- -D warnings
