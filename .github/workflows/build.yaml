name: Build and Deploy

on:
  workflow_dispatch:
  push:
    branches: ["main"]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "build"
  cancel-in-progress: false

jobs:
  setup:
    name: Set Up
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - id: tag
        run: echo "TAG=$(echo '${{ github.event.head_commit.timestamp }}' | sed s/:/-/g | sed s/T/./g | sed s/+/./g)" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
      - run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag ${{ needs.setup.outputs.tag }}
          git push origin ${{ needs.setup.outputs.tag }}

  licenses:
    name: Gather and Publish License Info
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dir: ["backend", "cli", "lib"]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: |
          cargo install --locked cargo-about
          cargo about generate -o attribution-${{ matrix.dir }}.html --manifest-path ${{ matrix.dir }}/Cargo.toml --all-features about.hbs
      - uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.setup.outputs.tag }}
          tag_name: ${{ needs.setup.outputs.tag }}
          fail_on_unmatched_files: true
          files: attribution-${{ matrix.dir }}.html

  backend:
    name: Backend Docker
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - run: docker build -t ghcr.io/janm-dev/pinger:latest -f backend/Dockerfile .
      - run: docker push ghcr.io/janm-dev/pinger:latest

  android:
    name: Android
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: "aarch64-linux-android,arm-linux-androideabi,armv7-linux-androideabi,i686-linux-android,thumbv7neon-linux-androideabi,x86_64-linux-android"
      - uses: Swatinem/rust-cache@v2
      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
      - run: |
          BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
          echo "BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION" >> $GITHUB_ENV
      - run: |
          chmod +x ./android/gradlew
          cd android && ./gradlew assembleRelease
      - uses: ilharp/sign-android-release@v2
        id: sign_apk
        with:
          releaseDir: android/app/build/outputs/apk/release/
          signingKey: ${{ secrets.ANDROID_SIGNING_KEY_BASE64 }}
          keyAlias: ${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_SIGNING_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}
          buildToolsVersion: ${{ env.BUILD_TOOL_VERSION }}
      - run: mv ${{ steps.sign_apk.outputs.signedFile }} pinger.apk
      - uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.setup.outputs.tag }}
          tag_name: ${{ needs.setup.outputs.tag }}
          fail_on_unmatched_files: true
          files: pinger.apk

  linux:
    name: Build on Linux
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: ["x86_64-unknown-linux-gnu"]
        dir: ["backend", "cli"]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - run: |
          cd ${{ matrix.dir }}
          cargo build --release --target ${{ matrix.target }}
          mv target/${{ matrix.target }}/release/pinger-${{ matrix.dir }} ../${{ matrix.dir }}-${{ matrix.target }}
      - uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.setup.outputs.tag }}
          tag_name: ${{ needs.setup.outputs.tag }}
          fail_on_unmatched_files: true
          files: ${{ matrix.dir }}-${{ matrix.target }}

  windows:
    name: Build on Windows
    needs: setup
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target: ["x86_64-pc-windows-msvc"]
        dir: ["backend", "cli"]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - run: |
          cd ${{ matrix.dir }}
          cargo build --release --target ${{ matrix.target }}
          cp "target/${{ matrix.target }}/release/pinger-${{ matrix.dir }}.exe" "../${{ matrix.dir }}-${{ matrix.target }}.exe"
      - uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.setup.outputs.tag }}
          tag_name: ${{ needs.setup.outputs.tag }}
          fail_on_unmatched_files: true
          files: ${{ matrix.dir }}-${{ matrix.target }}.exe
